//Inductive definitions

bst(E,M)::= E = nil & emp & M = emptyset | 
exists X,Y,M1,M2. E |-> ((left,X), (right,Y)) * bst(X,M1) * bst(Y,M2) & M={E.data} cup M1 cup M2 & M1 < E.data < M2

bsthole(E,F,M1,M2)::= E = F & emp & M1 = M2 | 
exists X,Y,M3,M4. E |-> ((left,X), (right,Y)) * bst(X,M3) * bsthole(Y,F,M4,M2) & M1={E.data} cup M3 cup M4 & M3 < E.data < M4 |
exists X,Y,M3,M4. E |-> ((left,X), (right,Y)) * bsthole(X,F,M3,M2) * bst(Y,M4) & M1={E.data} cup M3 cup M4 & M3 < E.data < M4

//C source code

struct Node* delete(struct Node* root, int key){
	struct Node *cur = root;
	struct Node *parent = NULL;
	struct Node *nxtparent = NULL;
	struct Node *keynode;
	struct Node *lft;
	struct Node *rgt;
	struct Node *subroot;

	// the original tree is empty
	if(root == NULL)
		return root;

	// the tree is nonempty
	if(cur->data > key)
	{
		parent = cur;
		cur = cur->left;
	}
	else if(cur->data < key)
	{
		parent = cur;
		cur = cur->right;
	}

	while(cur != NULL && cur->data != key) {
		if (cur->data > key){
			parent = cur; cur = cur->left;
		}
		else {
			parent = cur; cur = cur->right;
		}
	}

	// only delete when the key occurs in the bst
	keynode = cur;
	if(keynode != NULL)
	{
		if(keynode->right == NULL){
			lft = keynode->left;
			subroot = lft;
			free(keynode);
		}
		else{
			/* if the right subtree of the removed node does not have left subtree*/
			rgt = keynode->right;
			if (rgt->left == NULL){
				rgt->left = keynode->left;
				subroot = rgt;
				free(keynode);
			}
			/* if the right subtree of the removed node has left subtree*/
			else{
				cur = rgt->left;
				nxtparent = rgt;
				/* search for the smallest node pointed by ’min’ in the right subtree*/
				while(cur->left != NULL){
					nxtparent = cur;
					cur = cur->left;
				}
				// exchange removed node with the smallest node
				nxtparent->left = cur->right;
				cur->left = keynode->left;
				cur->right = rgt;
				subroot = cur;
				free(keynode);
			}
		}
	}
	// adjust pointers after deletion
	if(parent == NULL)
	{
		root = subroot;
	}
	else
	{
		if(parent->data > key)
			parent->left = subroot;
		else
			parent->right = subroot;
	}

	return root;
}


//Pre-post conditions and the corresponding verification conditions.

// Let root0, M0 be a ghost variable for the multiset of data values occurring in the bst tree.

// Three blocks before the first while loop

Pre: bst(root0, M0) & cur = root0 & parent = nil

Post: bst(root0, M0) & root0 = nil & M0 = emptyset & ret = root0

VC01: bst(root0, M0) & cur = root0 & parent = nil & root0 = nil & ret = root0|-
bst(root0, M0) & root0 = nil & M0 = emptyset & ret = root0

{
assume(root == NULL);
return root;
}


Pre:  bst(root0,M0) & cur1 = root0 & parent1 = nil & ! root0 = nil

Post: root0|->((left,cur2), (right,Y), (data, d)) * bst(cur2, M1) * bst(Y, M2) & M0 = {d} cup M1 cup M2 & M1 < d < M2 & cur1 = root0 & parent2 = cur1 & key in M0 <=> key in M1  & ! parent2 = nil

VC02: root0|->((left,X), (right,Y), (data, d)) * bst(X, M1) * bst(Y, M2) & M0 = {d} cup M1 cup M2 & M1 < d < M2 & d > key & cur1 = root & parent1 = nil & ! root0 = nil & parent2 = cur1 & cur2 = X |-
root0|->((left,cur2), (right,Y), (data, d)) * bst(cur2, M1) * bst(Y, M2) & M0 = {d} cup M1 cup M2 & M1 < d < M2 & cur1 = root0 & parent2 = cur1 & key in M0 <=> key in M1 & ! parent2 = nil

{
assume(root != NULL);
assume(cur->data > key);
parent = cur;
cur = cur->left;
}

Pre:  bst(root0,M0) & cur1 = root0 & parent1 = nil & ! root0 = nil

Post: root0|->((left,X), (right,cur2), (data, d)) * bst(X, M1) * bst(cur2, M2) & M0 = {d} cup M1 cup M2 & M1 < d < M2 & cur1 = root0 & parent2 = cur1 & key in M0 <=> key in M2  & ! parent2 = nil

VC03: root0|->((left,X), (right,Y), (data, d)) * bst(X, M1) * bst(Y, M2) & M0 = {d} cup M1 cup M2 & M1 < d < M2 & d < key & cur1 = root0 & parent1 = nil & ! root0 = nil & parent2 = cur1 & cur2 = Y |-
root0|->((left,X), (right,cur2), (data, d)) * bst(X, M1) * bst(cur2, M2) & M0 = {d} cup M1 cup M2 & M1 < d < M2 & cur1 = root0 & parent2 = cur1 & key in M0 <=> key in M2  & ! parent2 = nil

{
assume(root != NULL);
assume(cur->data < key);
parent = cur;
cur = cur->right;
}


// two blocks for the first while loop

Pre1: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,cur1), (right,Y), (data, d1)) * bst(cur1, M3) * bst(Y,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent1 = nil) & d1 > key & (key in M0 <=> key in M3)
// if key not in M0, then M0 \ {key} = M0

Pre2: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,X), (right,cur1), (data, d1)) * bst(X, M3) * bst(cur1,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent1 = nil) & d1 < key & (key in M0 <=> key in M4)

Post: bsthole(root0,parent2, M1, M5) * parent2 |-> ((left,cur2), (right,Z), (data, d2)) * bst(cur2, M6) * bst(Z, M7) & M1 = M0 \ {key} & M5 = ({d2} cup M6 cup M7) \ {key}  & M6 < d2 < M7  & !(parent2 = nil) & d2 > key & key in M0 <=> key in M6

VC04: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,cur1), (right,Y), (data, d1)) * cur1 |-> ((left,X), (right,Z), (data, d2)) * bst(X, M6) * bst(Z, M7) * bst(Y,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & M3 = {d2} cup M6 cup M7 & M6 < d2 < M7 & ! parent1 =nil & d1 > key & (key in M0 <=> key in M3) & ! cur1 = nil & d2 > key & parent2 = cur1 & cur2 = X & M5 = M3 \{key} |-
bsthole(root0,parent2, M1, M5) * parent2 |-> ((left,cur2), (right,Z), (data, d2)) * bst(cur2, M6) * bst(Z, M7) & M1 = M0 \ {key} & M5 = ({d2} cup M6 cup M7) \ {key}  & M6 < d2 < M7 & !(parent2 = nil) & d2 > key & key in M0 <=> key in M6

VC05: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,X), (right,cur1), (data, d1)) * bst(X,M3) * cur1 |-> ((left,Y), (right,Z), (data, d2)) * bst(Y, M6) * bst(Z, M7) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & M3 = {d2} cup M6 cup M7 & M6 < d2 < M7 & & ! parent1 =nil & d1 < key & (key in M0 <=> key in M4) & ! cur1 = nil & d2 > key & parent2 = cur1 & cur2 = Y & M5 = M3 \ {key} |-
bsthole(root0,parent2, M1, M5) * parent2 |-> ((left,cur2), (right,Z), (data, d2)) * bst(cur2, M6) * bst(Z, M7) & M1 = M0 \ {key} & M5 = ({d2} cup M6 cup M7) \ {key}  & M6 < d2 < M7 & !(parent2 = nil) & d2 > key & key in M0 <=> key in M6

{
assume(cur != NULL && cur->data != key);
assume(cur->data > key);
parent = cur; 
cur = cur->left;
}


Pre1: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,cur1), (right,Y), (data, d1)) * bst(cur1, M3) * bst(Y,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent1 = nil) & d1 > key & (key in M0 <=> key in M3)

Pre2: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,X), (right,cur1), (data, d1)) * bst(X, M3) * bst(cur1,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent1 = nil) & d1 < key & (key in M0 <=> key in M4)

Post: bsthole(root0,parent2, M1, M5) * parent2 |-> ((left,Z), (right,cur2), (data, d2)) * bst(Z, M6) * bst(cur2, M7) & M1 = M0 \ {key} & M5 = ({d2} cup M6 cup M7) \ {key}  & M6 < d2 < M7 & !(parent2 = nil) & d2 < key & key in M0 <=> key in M7

VC06: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,cur1), (right,Y), (data, d1)) * cur1 |-> ((left,Z), (right,X), (data, d2)) * bst(Z, M6) * bst(X, M7) * bst(Y,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & M3 = {d2} cup M6 cup M7 & M6 < d2 < M7 & ! parent1 =nil & d1 > key & (key in M0 <=> key in M3) & ! cur1 = nil & d2 < key & parent2 = cur1 & cur2 = X & M5 = M3 \ {key} |-
bsthole(root0,parent2, M1, M5) * parent2 |-> ((left,Z), (right,cur2), (data, d2)) * bst(Z, M6) * bst(cur2, M7) & M1 = M0 \ {key} & M5 = ({d2} cup M6 cup M7) \ {key}  & M6 < d2 < M7  & !(parent2 = nil) & d2 < key & key in M0 <=> key in M7

VC07: bsthole(root0, parent1, M1, M2) * parent1 |-> ((left,X), (right,cur1), (data, d1)) * bst(X,M3) * cur1 |-> ((left,Z), (right,Y), (data, d2)) * bst(Z, M6) * bst(Y, M7) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & M3 = {d2} cup M6 cup M7 & M6 < d2 < M7 & ! parent1 =nil & d1 < key & (key in M0 <=> key in M4) & ! cur1 = nil & d2 < key & parent2 = cur1 & cur2 = Y & M5 = M3 \ {key} |-
bsthole(root0,parent2, M1, M5) * parent2 |-> ((left,Z), (right,cur2), (data, d2)) * bst(Z, M6) * bst(cur2, M7) & M1 = M0 \ {key} & M5 = ({d2} cup M6 cup M7) \ {key}  & M6 < d2 < M7  & !(parent2 = nil) & d2 < key & key in M0 <=> key in M7

{
assume(cur != NULL && cur->data != key);
assume(cur->data < key);
parent = cur; 
cur = cur->right;
}


// the blocks for the deletion: if(keynode != NULL) … else …

Pre1: root0|->((left,X), (right,Y), (data, d1)) * bst(X, M1) * bst(Y, M2) & M0 = {d1} cup M1 cup M2 & M1 < d1 < M2 & cur = root0 & parent = nil & key = d1

Post1: bst(subroot, M1) & M1 = M0 \ {key} & key in M0 & parent = nil

VC08: bst(X, M1) * bst(Y, M2) & M0 = {d1} cup M1 cup M2 & M1 < d1 < M2 & cur = root0 & parent = nil & key = d1 & keynode = cur & ! cur = nil & Y = nil & lft = X & subroot = lft |-
bst(subroot, M1) & M1 = M0 \ {key} & key in M0 & parent = nil

Pre2: bsthole(root0, parent, M1, M2) * parent |-> ((left,cur), (right,Y), (data, d1)) * bst(cur, M3) * bst(Y,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & (key in M0 <=> key in M3) & ( (! cur = nil) => cur.data == key)

Post2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M5) * bst(Y,M4) & M1 = M0 \ {key} & M5 = M3 \ {key} & M2 = {d1} cup M5 cup M4 & M5 < d1 < M4 & d1 > key & key in M3 & key in M0 & !(parent = nil)

VC09: bsthole(root0, parent, M1, M2) * parent |-> ((left,cur), (right,Y), (data, d1)) * bst(X, M5) * bst(Z,M6) * bst(Y,M4) & M3 = {d2} cup M5 cup M6 & M5 < d2 < M6 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & (key in M0 <=> key in M3) & d2 = key & keynode = cur & ! keynode = nil & Z = nil & lft = X & subroot = lft |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M5) * bst(Y,M4) & M1 = M0 \ {key} & M5 = M3 \ {key} & M2 = {d1} cup M5 cup M4 & M5 < d1 < M4 & d1 > key & key in M3 & key in M0 & !(parent = nil)

Pre3: bsthole(root0, parent, M1, M2) * parent |-> ((left,X), (right,cur), (data, d1)) * bst(X, M3) * bst(cur,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & (key in M0 <=> key in M4) & ( (! cur = nil) => cur.data ==key)

Post3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * bst(X,M3) * bst(subroot, M5) & M1 = M0 \ {key} & M5 = M4 \ {key} & M2 = {d1} cup M3 cup M5 & M3 < d1 < M5 & d1 < key & key in M4 & key in M0 & !(parent = nil)

VC10: bsthole(root0, parent, M1, M2) * parent |-> ((left,X), (right,cur), (data, d1)) * bst(X, M3) * bst(Y, M5) * bst(Z, M6) & M4 = {d2} cup M5 cup M6 & M5 < d2 < M6 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & (key in M0 <=> key in M4) & d2 = key & keynode = cur & Z = nil & lft = Y & subroot = lft |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * bst(X,M3) * bst(subroot, M5) & M1 = M0 \ {key} & M5 = M4 \ {key} & M2 = {d1} cup M3 cup M5 & M3 < d1 < M5 & d1 < key & key in M4 & key in M0 & !(parent = nil)

{
assume(cur == NULL || cur->data == key);
keynode = cur;
assume(keynode != NULL);
assume(keynode->right == NULL);
lft = keynode->left;
subroot = lft;
free(keynode);
}

Pre1: root0|->((left,X), (right,Y), (data, d1)) * bst(X, M1) * bst(Y, M2) & M0 = {d1} cup M1 cup M2 & M1 < d1 < M2 & cur = root0 & parent = nil & key = d1

Post1: bst(subroot, M3) & M3 = M0 \ {key} & key in M0 & parent = nil 

VC11: bst(X, M1) * Y |-> ((left,X), (right,U), (data,d2)) * bst(Z, M4) * bst(U, M5) & M2 = {d2} cup M4 cup M5 & M4 < d2 < M5 & M0 = {d1} cup M1 cup M2 & M1 < d1 < M2 & cur = root0 & parent = nil & d1 = key & keynode = cur & ! Y = nil & rgt = Y & Z = nil & subroot = rgt & M3 = {d2} cup M1 cup M5 |-
bst(subroot, M3) & M3 = M0 \ {key} & key in M0 & parent = nil 

Pre2: bsthole(root0, parent, M1, M2) * parent |-> ((left,cur), (right,Y), (data, d1)) * bst(cur, M3) * bst(Y,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & (key in M0 <=> key in M3) & ( (! cur = nil) => cur.data ==key)

Post2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M5) * bst(Y,M4) & M1 = M0 \ {key} & M5 = M3 \ {key} & M2 = {d1} cup M5 cup M4 & M5 < d1 < M4 & d1 > key & key in M3 & key in M0 & !(parent = nil)

VC12: bsthole(root0, parent, M1, M2) * parent |-> ((left,cur), (right,Y), (data, d1)) * bst(X, M6) * Z |-> ((left,X),(right,V), (data, d3)) * bst(U, M8) * bst(V, M9) * bst(Y,M4) & M7 = {d3} cup M8 cup M9 & M8 < d3 < M9 & M3 = {d2} cup M6 cup M7 & M6 < d2 < M7 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & (key in M0 <=> key in M3) & d2 = key & keynode = cur & !Z = nil & rgt = Z & U = nil & subroot = rgt & M5 = {d3} cup M6 cup M9 |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M5) * bst(Y,M4) & M1 = M0 \ {key} & M5 = M3 \ {key} & M2 = {d1} cup M5 cup M4 & M5 < d1 < M4 & d1 > key & key in M3 & key in M0 & !(parent = nil)

Pre3: bsthole(root0, parent, M1, M2) * parent |-> ((left,X), (right,cur), (data, d1)) * bst(X, M3) * bst(cur,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & (key in M0 <=> key in M4) & ( (! cur = nil) => cur.data ==key)

Post3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * bst(X,M3) * bst(subroot, M5) & M1 = M0 \ {key} & M5 = M4 \ {key} & M2 = {d1} cup M3 cup M5 & M3 < d1 < M5 & key in M4 & key in M0 & !(parent = nil)

VC13: bsthole(root0, parent, M1, M2) * parent |-> ((left,X), (right,cur), (data, d1)) * bst(X, M3) * bst(Y, M6) * Z |-> ((left, Y), (right, V), (data, d3)) * bst(U, M8) * bst(V, M9) & M7 = {d3} cup M8 cup M9 & M8 < d3 < M9 & M4 = {d2} cup M6 cup M7 & M6 < d2 < M7 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & (key in M0 <=> key in M4) & d2 =key & keynode = cur & !Z = nil & rgt = Z & U = nil & subroot = rgt & M5 = {d3} cup M6 cup M9 |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * bst(X,M3) * bst(subroot, M5) & M1 = M0 \ {key} & M5 = M4 \ {key} & M2 = {d1} cup M3 cup M5 & M3 < d1 < M5 & d1 < key & key in M4 & key in M0 & !(parent = nil)

{
assume(cur == NULL || cur->data == key);
keynode = cur;
assume(keynode != NULL);
assume(keynode->right != NULL);
rgt = keynode->right;
assume(rgt->left == NULL);
rgt->left = keynode->left;
subroot = rgt;
free(keynode);
}


// keymin is another ghost variable denoting the minimum data value of the right subtree of rgt.

Pre1: root0|->((left,X), (right,Y), (data, d1)) * bst(X, M1) * bst(Y, M2) & M0 = {d1} cup M1 cup M2 & M1 < d1 < M2 & cur1 = root0 & parent = nil & key = d1

Post1: keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent, M5, M6) * nxtparent |-> ((left, cur2), (right, Z), (data, d2)) * bst(cur2, M3) * bst(Z, M4) & M6 = ({d2} cup M3 cup M4) \ {keymin} & M3 < d2 < M4 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur2 = nil & keymin in M3 & keymin <= M3

VC14: root0|->((left,X), (right,Y), (data, d1)) * bst(X, M1) * Y |-> ((left, U),(right,Z), (data, d2)) * bst(U, M3) * bst(Z, M4) & M2 = {d2} cup M3 cup M4 & M3 < d2 < M4 & M0 = {d1} cup M1 cup M2 & M1 < d1 < M2 & cur1 = root0 & parent = nil & key = d1 & keynode = cur1 & d1 = key & !Y = nil & rgt = Y & !U = nil & cur2 = U & nxtparent = rgt & M5 = M6 & M6 = ({d2} cup M3 cup M4) \ {keymin} & keymin in M3 & keymin <= M3 |-
keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent, M5, M6) * nxtparent |-> ((left, cur2), (right, Z), (data, d2)) * bst(cur2, M3) * bst(Z, M4) & M6 = ({d2} cup M3 cup M4) \ {keymin} & M3 < d2 < M4 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur2 = nil & keymin in M3 & keymin <= M3

Pre2: bsthole(root0, parent, M1, M2) * parent |-> ((left,cur1), (right,Y), (data, d1)) * bst(cur1, M3) * bst(Y, M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & (key in M0 <=> key in M3) & ( (! cur1 = nil) => cur1.data ==key)

Post2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent2, M8, M9) * nxtparent2 |-> ((left, cur2), (right, Z), (data, d3)) * bst(cur2, M6) * bst(Z, M7) * bst(Y,M4) & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur2 = nil & keymin in M6 & keymin <= M6

VC15: bsthole(root0, parent, M1, M2) * parent |-> ((left,cur1), (right,Y), (data, d1)) * cur1 |-> ((left,X), (right,U), (data, d2)) * bst(X, M5) * U |-> ((left,V), (right, Z), (data, d3)) * bst(V, M6) * bst(Z, M7) * bst(Y, M4) & M10 = {d3} cup M6 cup M7 & M6 < d3 < M7 & M3 = {d2} cup M5 cup M10 & M5 < d2 < M10 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & (key in M0 <=> key in M3) & keynode = cur1 & d2 = key & ! U = nil & rgt = U & ! V = nil & cur2 = V & nxtparent2 = rgt & M8 = M9 & M9 = M10 \ {keymin} & keymin in M6 & keymin <= M6 |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent2, M8, M9) * nxtparent2 |-> ((left, cur2), (right, Z), (data, d3)) * bst(cur2, M6) * bst(Z, M7) * bst(Y,M4) & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur2 = nil & keymin in M6 & keymin <= M6

Pre3: bsthole(root0, parent, M1, M2) * parent |-> ((left,X), (right,cur1), (data, d1)) * bst(X, M3) * bst(cur1,M4) & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & (key in M0 <=> key in M4) & ( (! cur1 = nil) => cur1.data ==key)

Post3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent2, M8, M9) * nxtparent2 |-> ((left, cur2), (right, Z), (data, d3)) * bst(cur2, M6) * bst(Z, M7) & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur2 = nil & keymin in M6 & keymin <= M6

VC16: bsthole(root0, parent, M1, M2) * parent |-> ((left,X), (right,cur1), (data, d1)) * bst(X, M3) * cur1 |-> ((left,Y), (right,U), (data, d2)) * bst(Y, M5) * U |-> ((left,V), (right,Z), (data,d3)) * bst(V, M6) * bst(Z,M7) & M10 = {d3} cup M6 cup M7 & M6 < d3 < M7 &  M4 = {d2} cup M5 cup M10 & M5 < d2 < M10 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & (key in M0 <=> key in M4) & keynode = cur1 & d2 = key & !U = nil & rgt = U & !V = nil & cur2 = V & nxtparent2 = rgt & M8 = M9 & M9 = M10 \ {keymin} & keymin in M6 & keymin <= M6|- 
bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent2, M8, M9) * nxtparent2 |-> ((left, cur2), (right, Z), (data, d3)) * bst(cur2, M6) * bst(Z, M7) & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur2 = nil & keymin in M6 & keymin <= M6

{
assume(cur1 == NULL || cur1->data == key);
keynode = cur1;
assume(keynode != NULL);
assume(keynode->right != NULL);
rgt = keynode->right;
assume(rgt->left != NULL);
cur2 = rgt->left;
nxtparent = rgt;
}

// block for the second while loop

Pre1: keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent1, M5, M6) * nxtparent1 |-> ((left, cur1), (right, Z), (data, d2)) * bst(cur1, M3) * bst(Z, M4) & M6 = ({d2} cup M3 cup M4) \ {keymin} & M3 < d2 < M4 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur1 = nil & keymin in M3 & keymin <= M3

Post1: keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent2, M5, M7) * nxtparent2 |-> ((left, cur2), (right, Y), (data, d3)) * bst(cur2, M8) * bst(Y, M9) & M7 = ({d3} cup M8 cup M9) \ {keymin} & M8 < d3 < M9 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur2 = nil & keymin in M8 & keymin <= M8

VC17: keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent1, M5, M6) * nxtparent1 |-> ((left, cur1), (right, Z), (data, d2)) * cur1 |-> ((left,U),(right,Y),(data,d3)) * bst(U,M8) * bst(Y,M9) * bst(Z, M4) & M3 = {d3} cup M8 cup M9 & M8 < d3 < M9 & M6 = ({d2} cup M3 cup M4) \ {keymin} & M3 < d2 < M4 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur1 = nil & keymin in M3 & keymin <= M3 & ! U = nil & nxtparent2 = cur1 & cur2 = U & M7 = ({d3} cup M8 cup M9) \ {keymin} |-
keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent2, M5, M7) * nxtparent2 |-> ((left, cur2), (right, Y), (data, d3)) * bst(cur2, M8) * bst(Y, M9) & M7 = ({d3} cup M8 cup M9) \ {keymin} & M8 < d3 < M9 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur2 = nil & keymin in M8 & keymin <= M8
 
Pre2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent1, M8, M9) * nxtparent1 |-> ((left, cur1), (right, Z), (data, d3)) * bst(cur1, M6) * bst(Z, M7) * bst(Y,M4) & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur1 = nil & keymin in M6 & keymin <= M6

Post2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent2, M8, M10) * nxtparent2 |-> ((left, cur2), (right, U), (data, d4)) * bst(cur2, M11) * bst(U, M12) * bst(Y,M4) & M5 < key < M8 cup {keymin} & M10 = ({d4} cup M11 cup M12) \ {keymin} & M11 < d4 < M12 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur2 = nil & keymin in M11 & keymin <= M11

VC18: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent1, M8, M9) * nxtparent1 |-> ((left, cur1), (right, Z), (data, d3)) * cur1 |-> ((left, V), (right, U), (data, d4)) * bst(V, M11) * bst(U, M12) * bst(Z, M7) * bst(Y,M4) & M6 = {d4} cup M11 cup M12 & M11 < d4 < M12 & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur1 = nil & keymin in M6 & keymin <= M6 & ! V = nil & nxtparent2 = cur1 & cur2 = V & M10 = M6 \ {keymin} |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent2, M8, M10) * nxtparent2 |-> ((left, cur2), (right, U), (data, d4)) * bst(cur2, M11) * bst(U, M12) * bst(Y,M4) & M5 < key < M8 cup {keymin} & M10 = ({d4} cup M11 cup M12) \ {keymin} & M11 < d4 < M12 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur2 = nil & keymin in M11 & keymin <= M11

Pre3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent1, M8, M9) * nxtparent1 |-> ((left, cur1), (right, Z), (data, d3)) * bst(cur1, M6) * bst(Z, M7) & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur1 = nil & keymin in M6 & keymin <= M6

Post3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent2, M8, M10) * nxtparent2 |-> ((left, cur2), (right, U), (data, d4)) * bst(cur2, M11) * bst(U, M12) & M5 < key < M8 cup {keymin} & M10 = ({d4} cup M11 cup M12) \ {keymin} & M11 < d4 < M12 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur2 = nil & keymin in M11 & keymin <= M11

VC19: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent1, M8, M9) * nxtparent1 |-> ((left, cur1), (right, Z), (data, d3)) * cur1 |-> ((left, V), (right, U), (data, d4)) * bst(V, M11) * bst(U, M12) * bst(Z, M7) & M6 = {d4} cup M11 cup M12 & M11 < d4 < M12 & M5 < key < M8 cup {keymin} & M9 = ({d3} cup M6 cup M7) \ {keymin} & M6 < d3 < M7 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & !cur1 = nil & nxtparent2 = cur1 &  ! V = nil & cur2 = V & keymin in M6 & keymin <= M6 & M10 = M6 \ {keymin} |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent2, M8, M10) * nxtparent2 |-> ((left, cur2), (right, U), (data, d4)) * bst(cur2, M11) * bst(U, M12) & M5 < key < M8 cup {keymin} & M10 = ({d4} cup M11 cup M12) \ {keymin} & M11 < d4 < M12 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur2 = nil & keymin in M11 & keymin <= M11

{
assume(cur1->left != NULL);
nxtparent2 = cur1;
cur2 = cur1->left;
} 

// the block after the second while loop

Pre1: keynode |-> ((left, X), (right, rgt), (data, key)) * bst(X, M1) * bsthole(rgt, nxtparent, M5, M6) * nxtparent |-> ((left, cur), (right, Z), (data, d2)) * bst(cur, M3) * bst(Z, M4) & M6 = ({d2} cup M3 cup M4) \ {keymin} & M3 < d2 < M4 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur = nil & keymin in M3 & keymin <= M3

Post1: bst(subroot, M7) & key in M0 & M7 = M0 \ {key} & parent = nil

VC20: bst(X, M1) * bsthole(rgt, nxtparent, M5, M6) * nxtparent |-> ((left, V), (right, Z), (data, d2)) * cur |-> ((left,X), (right,rgt), (data,d3)) * bst(U, M8) * bst(V, M9) * bst(Z, M4) & M3 = {d3} cup M8 cup M9 & M8 < d3 < M9 & M6 = ({d2} cup M3 cup M4) \ {keymin} & M3 < d2 < M4 & M0 = {key} cup M1 cup M5 cup {keymin} & M1 < key < M5 cup {keymin} & parent = nil & ! cur = nil & keymin in M3 & keymin <= M3 & U = nil & subroot = cur & M7 = {d3} cup M1 cup M5 |-
bst(subroot, M7) & key in M0 & M7 = M0 \ {key} & parent = nil

Pre2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * keynode |-> ((left,X), (right, rgt), (data, key)) * bst(X,M5) * bsthole(rgt, nxtparent, M8, M10) * nxtparent |-> ((left, cur), (right, U), (data, d2)) * bst(cur, M11) * bst(U, M12) * bst(Y,M4) & M5 < key < M8 cup {keymin} & M10 = ({d2} cup M11 cup M12) \ {keymin} & M11 < d2 < M12 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur = nil & keymin in M11 & keymin <= M11

Post2: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M13) * bst(Y, M4) & M13 = M3 \ {key} & M2 = {d1} cup M13 cup M4 & M13 < d1 < M4 & d1 > key & key in M3 & key in M0 & M1 = M0 \ {key} & ! parent = nil

VC21: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(X,M5) * bsthole(rgt, nxtparent, M8, M10) * nxtparent |-> ((left, Z), (right, U), (data, d2)) * cur |-> ((left,X),(right,rgt), (data,d3)) * bst(V,M14) * bst(Z, M15) * bst(U, M12) * bst(Y,M4) & M11 = {d3} cup M14 cup M15 & M14 < d3 < M15 & M5 < key < M8 cup {keymin} & M10 = ({d2} cup M11 cup M12) \ {keymin} & M11 < d2 < M12 & M3 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 > key & ! cur = nil & keymin in M11 & keymin <= M11 & V = nil & subroot = cur & M13 = {d3} cup M5 cup M8 |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M13) * bst(Y, M4) & M13 = M3 \ {key} & M2 = {d1} cup M13 cup M4 & M13 < d1 < M4 & d1 > key & key in M3 & key in M0 & M1 = M0 \ {key} & ! parent = nil

Pre3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * keynode |-> ((left,Y), (right, rgt), (data, key)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent, M8, M10) * nxtparent |-> ((left, cur), (right, Z), (data, d2)) * bst(cur, M11) * bst(Z, M12) & M5 < key < M8 cup {keymin} & M10 = ({d2} cup M11 cup M12) \ {keymin} & M11 < d2 < M12 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur = nil & keymin in M11 & keymin <= M11

Post3: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right,keynode), (data, d1)) * bst(X,M3) * bst(subroot, M14) & M14 = M4 \ {key} & M2 = {d1} cup M3 cup M14 & M3 < d1 < M4 & key in M4 & key in M0 & M1 = M0 \ {key} & ! parent = nil

VC22: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * bst(X,M3) * bst(Y,M5) * bsthole(rgt, nxtparent, M8, M10) * nxtparent |-> ((left, W), (right, Z), (data, d2)) * cur |->((left,Y),(right,rgt), (data,d3)) * bst(V,M15) * bst(W,M16) * bst(Z, M12) & M11 = {d3} cup M15 cup M16 & M15 < d3 < M16 & M5 < key < M8 cup {keymin} & M10 = ({d2} cup M11 cup M12) \ {keymin} & M11 < d2 < M12 & M4 = {key} cup M5 cup M8 cup {keymin} & key in M0 & M1 = M0 \ {key} & M2 = ({d1} cup M3 cup M4) \ {key} & M3 < d1 < M4 & !(parent = nil) & d1 < key & ! cur = nil & keymin in M11 & keymin <= M11 & V = nil & subroot = cur & M14 = {d3} cup M5 cup M8 |-
bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right,keynode), (data, d1)) * bst(X,M3) * bst(subroot, M14) & M14 = M4 \ {key} & M2 = {d1} cup M3 cup M14 & M3 < d1 < M4 & d1 < key & key in M4 & key in M0 & M1 = M0 \ {key} & ! parent = nil

{
assume(cur->left == NULL);
nxtparent->left = cur->right;
cur->left = keynode->left;
cur->right = rgt;
subroot = cur;
free(keynode);
}

// the blocks for adjusting pointers after deletion

Pre: bst(subroot, M1) & M1 = M0 \ {key} & key in M0 & parent = nil

Post: bst(ret, M1) & M1 = M0 \ {key} & key in M0

VC23: bst(subroot, M1) & M1 = M0 \ {key} & key in M0 & parent = nil & root = subroot & ret =root |-
bst(ret, M1) & M1 = M0 \ {key} & key in M0

{
assume(parent == NULL);
root = subroot;
return root;
}

Pre: bsthole(root0, parent, M1, M2) * parent |-> ((left, keynode), (right,Y), (data, d1)) * bst(subroot, M5) * bst(Y,M4) & M1 = M0 \ {key} & M5 = M3 \ {key} & M2 = {d1} cup M5 cup M4 & M5 < d1 < M4 & d1 > key & key in M3 & key in M0 & !(parent = nil)

Post: bst(ret, M1) & M1 = M0 \ {key} & key in M0

VC24: bsthole(root0, parent, M1, M2) * parent |-> ((left, subroot), (right,Y), (data, d1)) * bst(subroot, M5) * bst(Y,M4) & M1 = M0 \ {key} & M5 = M3 \ {key} & M2 = {d1} cup M5 cup M4 & M5 < d1 < M4 & d1 > key & key in M3 & key in M0 & !(parent = nil) & ret = root0 
|-
bst(ret, M1) & M1 = M0 \ {key} & key in M0

{
assume(parent != NULL);
assume(parent->data > key);
parent->left = subroot;
return root;
}

Pre: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, keynode), (data, d1)) * bst(X,M3) * bst(subroot, M5) & M1 = M0 \ {key} & M5 = M4 \ {key} & M2 = {d1} cup M3 cup M5 & M3 < d1 < M5 & d1 < key & key in M4 & key in M0 & !(parent = nil)

Post: bst(ret, M1) & M1 = M0 \ {key} & key in M0

VC25: bsthole(root0, parent, M1, M2) * parent |-> ((left, X), (right, subroot), (data, d1)) * bst(X,M3) * bst(subroot, M5) & M1 = M0 \ {key} & M5 = M4 \ {key} & M2 = {d1} cup M3 cup M5 & M3 < d1 < M5 & d1 < key & key in M4 & key in M0 & !(parent = nil) & ret = root0 |-
bst(ret, M1) & M1 = M0 \ {key} & key in M0
{
assume(parent != NULL);
assume(parent->data < key);
parent->right = subroot;
return root;
}
